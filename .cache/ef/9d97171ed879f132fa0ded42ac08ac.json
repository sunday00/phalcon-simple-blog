{"id":"components/Main.svelte","dependencies":[{"name":"/Users/sunday00/workspace/projectsPHP/phalcon-simple-blog/svelte.config.js","includedInParent":true,"mtime":1592743755965},{"name":"/Users/sunday00/workspace/projectsPHP/phalcon-simple-blog/package.json","includedInParent":true,"mtime":1592745780570},{"name":"svelte/internal","loc":{"line":17,"column":7},"parent":"/Users/sunday00/workspace/projectsPHP/phalcon-simple-blog/resources/components/Main.svelte","resolved":"/Users/sunday00/workspace/projectsPHP/phalcon-simple-blog/node_modules/svelte/internal/index.mjs"},{"name":"/Users/sunday00/workspace/projectsPHP/phalcon-simple-blog/postcss.config.js","includedInParent":true,"mtime":1592745701291},{"name":"_css_loader","parent":"/Users/sunday00/workspace/projectsPHP/phalcon-simple-blog/resources/components/Main.svelte","resolved":"/Users/sunday00/workspace/projectsPHP/phalcon-simple-blog/node_modules/parcel-bundler/src/builtins/css-loader.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _internal = require(\"svelte/internal\");\n\n/* components/Main.svelte generated by Svelte v3.23.2 */\nconst file = \"components/Main.svelte\";\n\nfunction add_css() {\n  var style = (0, _internal.element)(\"style\");\n  style.id = \"svelte-19eipeh-style\";\n  style.textContent = \"h1.svelte-19eipeh{text-align:center}\\n\";\n  (0, _internal.append_dev)(document.head, style);\n}\n\nfunction create_fragment(ctx) {\n  let h1;\n  let t0;\n  let t1;\n  let t2;\n  const block = {\n    c: function create() {\n      h1 = (0, _internal.element)(\"h1\");\n      t0 = (0, _internal.text)(\"Hello \");\n      t1 = (0, _internal.text)(\n      /*name*/\n      ctx[0]);\n      t2 = (0, _internal.text)(\"!\");\n      (0, _internal.attr_dev)(h1, \"class\", \"svelte-19eipeh\");\n      (0, _internal.add_location)(h1, file, 10, 0, 90);\n    },\n    l: function claim(nodes) {\n      throw new Error(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, h1, anchor);\n      (0, _internal.append_dev)(h1, t0);\n      (0, _internal.append_dev)(h1, t1);\n      (0, _internal.append_dev)(h1, t2);\n    },\n    p: function update(ctx, [dirty]) {\n      if (dirty &\n      /*name*/\n      1) (0, _internal.set_data_dev)(t1,\n      /*name*/\n      ctx[0]);\n    },\n    i: _internal.noop,\n    o: _internal.noop,\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(h1);\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block,\n    id: create_fragment.name,\n    type: \"component\",\n    source: \"\",\n    ctx\n  });\n  return block;\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n  let {\n    name\n  } = $$props;\n  const writable_props = [\"name\"];\n  Object.keys($$props).forEach(key => {\n    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== \"$$\") console.warn(\"<Main> was created with unknown prop '\".concat(key, \"'\"));\n  });\n  let {\n    $$slots = {},\n    $$scope\n  } = $$props;\n  (0, _internal.validate_slots)(\"Main\", $$slots, []);\n\n  $$self.$set = $$props => {\n    if (\"name\" in $$props) $$invalidate(0, name = $$props.name);\n  };\n\n  $$self.$capture_state = () => ({\n    name\n  });\n\n  $$self.$inject_state = $$props => {\n    if (\"name\" in $$props) $$invalidate(0, name = $$props.name);\n  };\n\n  if ($$props && \"$$inject\" in $$props) {\n    $$self.$inject_state($$props.$$inject);\n  }\n\n  return [name];\n}\n\nclass Main extends _internal.SvelteComponentDev {\n  constructor(options) {\n    super(options);\n    if (!document.getElementById(\"svelte-19eipeh-style\")) add_css();\n    (0, _internal.init)(this, options, instance, create_fragment, _internal.safe_not_equal, {\n      name: 0\n    });\n    (0, _internal.dispatch_dev)(\"SvelteRegisterComponent\", {\n      component: this,\n      tagName: \"Main\",\n      options,\n      id: create_fragment.name\n    });\n    const {\n      ctx\n    } = this.$$;\n    const props = options.props || {};\n\n    if (\n    /*name*/\n    ctx[0] === undefined && !(\"name\" in props)) {\n      console.warn(\"<Main> was created without expected prop 'name'\");\n    }\n  }\n\n  get name() {\n    throw new Error(\"<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  set name(value) {\n    throw new Error(\"<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n}\n\nvar _default = Main;\nexports.default = _default;","css":"h1.svelte-19eipeh{\n  text-align:center\n}"},"sourceMaps":{"js":{"mappings":[{"source":"Main.svelte","name":null,"original":{"line":6,"column":0},"generated":{"line":10,"column":0}}],"sources":{"Main.svelte":"<script>\n    export let name;\n</script>\n\n<style>\nh1 {\n    text-align: center;\n}\n</style>\n\n<h1>Hello {name}!</h1>"},"lineCount":null}},"error":null,"hash":"6c85e63923e102fe0eb79127176bf61b","cacheData":{"env":{}}}